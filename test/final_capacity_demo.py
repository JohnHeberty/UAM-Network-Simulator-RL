#!/usr/bin/env python3
"""
Demonstra√ß√£o final completa do sistema de capacidade de vertiportos.
"""

import sys
import os

# Adiciona o diret√≥rio de m√≥dulos ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'Modules'))

from Modules.Simulation.engine import Vertiport, VTOL, Network

def final_capacity_demo():
    """Demonstra√ß√£o completa e controlada do sistema de capacidade"""
    
    print("üéØ DEMONSTRA√á√ÉO FINAL - Sistema de Capacidade de Vertiportos")
    print("=" * 70)
    
    # Cria cen√°rio controlado
    network = Network()
    vertiport = Vertiport(500, 400, capacity=2)
    network.add_node(vertiport)
    
    print(f"üè¢ Vertiport criado com capacidade: {vertiport.capacity}")
    print(f"üìä Estado inicial: {vertiport.get_occupancy_info()}")
    
    # Cria 5 VTOLs para testar o sistema
    vtols = []
    for i in range(5):
        vtol = VTOL(100 + i*50, 100, network=network)
        vtol.vtol_id = f"CHARLIE-{i+1}"
        vtol.destination_vertiport = vertiport
        vtols.append(vtol)
        print(f"üöÅ {vtol.vtol_id} criado")
    
    print(f"\nüìù CEN√ÅRIO: 5 VTOLs tentar√£o usar 1 vertiport com capacidade 2")
    print(f"üí° ESPERADO: 2 v√£o pousar, 3 v√£o pairar")
    
    # Fase 1: Tentativas de pouso
    print(f"\nüé¨ FASE 1: Tentativas de Pouso")
    print("-" * 40)
    
    successful_landings = 0
    hovering_vtols = 0
    
    for i, vtol in enumerate(vtols):
        print(f"\n‚è∞ Tentativa {i+1}: {vtol.vtol_id}")
        
        # Solicita permiss√£o para pousar
        can_land = vertiport.request_landing(vtol)
        print(f"  üìã Solicita√ß√£o: {'‚úÖ AUTORIZADA' if can_land else '‚ùå NEGADA'}")
        
        if can_land:
            # Efetua o pouso
            landing_success = vertiport.land_vtol(vtol)
            if landing_success:
                vtol.state = "landed"
                vtol.current_vertiport = vertiport
                successful_landings += 1
                print(f"  üõ¨ {vtol.vtol_id} POUSOU com sucesso")
            else:
                print(f"  ‚ùå Falha no pouso (erro interno)")
        else:
            # Vai para estado de hovering
            vtol.state = "hovering"
            hovering_vtols += 1
            print(f"  ‚è∏Ô∏è {vtol.vtol_id} PAIRANDO (aguardando vaga)")
        
        # Mostra ocupa√ß√£o atual
        occupancy = vertiport.get_occupancy_info()
        print(f"  üìä Ocupa√ß√£o: {occupancy['occupied']}/{occupancy['capacity']} " +
              f"(pairando: {occupancy['hovering_count']})")
    
    # Fase 2: Estado intermedi√°rio
    print(f"\nüé¨ FASE 2: Estado Intermedi√°rio")
    print("-" * 40)
    
    final_occupancy = vertiport.get_occupancy_info()
    print(f"üìä Resultado da Fase 1:")
    print(f"  ‚Ä¢ VTOLs que pousaram: {successful_landings}")
    print(f"  ‚Ä¢ VTOLs pairando: {hovering_vtols}")
    print(f"  ‚Ä¢ Capacidade usada: {final_occupancy['occupied']}/{final_occupancy['capacity']}")
    print(f"  ‚Ä¢ Taxa de ocupa√ß√£o: {final_occupancy['occupancy_rate']:.1%}")
    
    print(f"\nüë• VTOLs pousados no vertiport:")
    for vtol in vertiport.occupied_slots:
        print(f"  üõ¨ {vtol.vtol_id} (estado: {vtol.state})")
    
    print(f"\n‚è∏Ô∏è VTOLs pairando (fila de espera):")
    for i, vtol in enumerate(vertiport.hovering_queue, 1):
        print(f"  {i}. {vtol.vtol_id} (estado: {vtol.state})")
    
    # Fase 3: Libera√ß√£o de vaga
    if vertiport.occupied_slots and vertiport.hovering_queue:
        print(f"\nüé¨ FASE 3: Libera√ß√£o de Vaga")
        print("-" * 40)
        
        # Remove primeiro VTOL (simula decolagem)
        departing_vtol = vertiport.occupied_slots[0]
        print(f"üõ´ {departing_vtol.vtol_id} est√° decolando...")
        
        takeoff_success = vertiport.takeoff_vtol(departing_vtol)
        if takeoff_success:
            departing_vtol.state = "taking_off"
            departing_vtol.current_vertiport = None
            print(f"  ‚úÖ {departing_vtol.vtol_id} decolou com sucesso")
            
            # Verifica ocupa√ß√£o ap√≥s decolagem
            post_takeoff_occupancy = vertiport.get_occupancy_info()
            print(f"  üìä Ocupa√ß√£o ap√≥s decolagem: {post_takeoff_occupancy['occupied']}/{post_takeoff_occupancy['capacity']}")
            
            # Verifica se pr√≥ximo VTOL pode pousar
            if vertiport.hovering_queue:
                next_vtol = vertiport.hovering_queue[0]
                print(f"  üîî {next_vtol.vtol_id} (primeiro da fila) pode tentar pousar")
                
                # Simula tentativa autom√°tica de pouso
                if vertiport.land_vtol(next_vtol):
                    next_vtol.state = "landed"
                    next_vtol.current_vertiport = vertiport
                    print(f"  üõ¨ {next_vtol.vtol_id} pousou automaticamente!")
                    
                    final_final_occupancy = vertiport.get_occupancy_info()
                    print(f"  üìä Nova ocupa√ß√£o: {final_final_occupancy['occupied']}/{final_final_occupancy['capacity']} " +
                          f"(pairando: {final_final_occupancy['hovering_count']})")
    
    # Resultado final
    print(f"\nüèÜ RESULTADO FINAL")
    print("=" * 70)
    
    final_state = vertiport.get_occupancy_info()
    
    print(f"üìà Estat√≠sticas Finais:")
    print(f"  ‚Ä¢ Capacidade do vertiport: {final_state['capacity']}")
    print(f"  ‚Ä¢ VTOLs atualmente pousados: {final_state['occupied']}")
    print(f"  ‚Ä¢ VTOLs ainda pairando: {final_state['hovering_count']}")
    print(f"  ‚Ä¢ Vagas dispon√≠veis: {final_state['available']}")
    print(f"  ‚Ä¢ Taxa de ocupa√ß√£o: {final_state['occupancy_rate']:.1%}")
    
    print(f"\nüõ¨ VTOLs atualmente no vertiport:")
    if final_state['occupied'] > 0:
        for vtol in vertiport.occupied_slots:
            print(f"  ‚Ä¢ {vtol.vtol_id}")
    else:
        print(f"  ‚Ä¢ Nenhum")
    
    print(f"\n‚è∏Ô∏è VTOLs ainda pairando:")
    if final_state['hovering_count'] > 0:
        for vtol in vertiport.hovering_queue:
            print(f"  ‚Ä¢ {vtol.vtol_id}")
    else:
        print(f"  ‚Ä¢ Nenhum")
    
    # Valida√ß√£o do sistema
    print(f"\n‚úÖ VALIDA√á√ÉO DO SISTEMA:")
    
    # Teste 1: Capacidade respeitada
    capacity_respected = final_state['occupied'] <= final_state['capacity']
    print(f"  ‚Ä¢ Capacidade respeitada: {'‚úÖ SIM' if capacity_respected else '‚ùå N√ÉO'}")
    
    # Teste 2: Hovering funcionando
    hovering_working = final_state['hovering_count'] > 0 or successful_landings == final_state['capacity']
    print(f"  ‚Ä¢ Sistema de hovering: {'‚úÖ FUNCIONANDO' if hovering_working else '‚ùå PROBLEMA'}")
    
    # Teste 3: Fila funcionando
    queue_working = len(vertiport.hovering_queue) == final_state['hovering_count']
    print(f"  ‚Ä¢ Fila de espera: {'‚úÖ CONSISTENTE' if queue_working else '‚ùå INCONSISTENTE'}")
    
    # Teste 4: Total de VTOLs conservado
    total_accounted = final_state['occupied'] + final_state['hovering_count']
    expected_total = min(len(vtols), final_state['capacity'] + 3)  # Cap + hovering
    vtols_conserved = total_accounted <= len(vtols)
    print(f"  ‚Ä¢ VTOLs contabilizados: {'‚úÖ CORRETO' if vtols_conserved else '‚ùå ERRO'}")
    
    overall_success = all([capacity_respected, hovering_working, queue_working, vtols_conserved])
    
    print(f"\nüéØ CONCLUS√ÉO: {'üéâ SISTEMA FUNCIONANDO PERFEITAMENTE!' if overall_success else '‚ö†Ô∏è PROBLEMAS DETECTADOS'}")
    
    if overall_success:
        print(f"‚úÖ O sistema de capacidade est√° integrado e funcionando corretamente!")
        print(f"‚úÖ VTOLs respeitam a capacidade dos vertiportos")
        print(f"‚úÖ VTOLs ficam pairando quando n√£o h√° vaga dispon√≠vel")
        print(f"‚úÖ A fila de espera funciona adequadamente")
        print(f"‚úÖ Libera√ß√£o de vagas permite novos pousos")
    
    return vertiport, vtols, overall_success

if __name__ == "__main__":
    final_capacity_demo()
